stages:
    - Build
    # - SonarQualityGate
    - Artifacts
    - UnitTest
    - SonarScanner
    - DockerBuild
    - Deploy

Build:
    stage: Build
    image: mcr.microsoft.com/dotnet/sdk:6.0
    tags:
        - DevOps
    script:
        - echo 'dotnet restore'
        - dotnet restore ./Services.sln 
        - echo 'dotnet build'
        - dotnet build ./Services.sln --configuration Release --no-restore

Publish_Artifacts_Core:
    stage: Artifacts
    image: mcr.microsoft.com/dotnet/sdk:6.0
    tags:
        - DevOps
    script: 
        - echo 'dotnet publish'
        - dotnet publish ./Services/Services.csproj --configuration Release
    artifacts:
        name: "Service.Core_$CI_BUILD_ID"
        paths:
            - "Services/bin/Release/net6.0/publish"
    dependencies:
        - Build
    when: manual

Publish_Artifacts_Auth:
    stage: Artifacts
    image: mcr.microsoft.com/dotnet/sdk:6.0
    tags:
        - DevOps
    script: 
        - echo 'dotnet publish'
        - dotnet publish ./Security/Security.csproj --configuration Release
    artifacts:
        name: "Service.Auth_$CI_BUILD_ID"
        paths:
            - "Security/bin/Release/net6.0/publish"
    dependencies:
        - Build
    when: manual

UnitTest:
    stage: UnitTest
    image: mcr.microsoft.com/dotnet/sdk:6.0
    tags:
        - DevOps
    script: 
        - dotnet restore ./Services.sln 
        - dotnet test -c Release ./UnitTest/UnitTest.csproj 
            /p:CollectCoverage=true /p:CoverletOutputFormat="cobertura" /p:CoverletOutput="./TestResults/" --logger trx --results-directory ./testresults
        # - |-
        #     dotnet test --no-build --output build --collect:"XPlat Code Coverage";
        #     dotnet tool install -g coverlet.console;
        #     dotnet tool install -g dotnet-reportgenerator-globaltool;
        #     coverlet ./UnitTest/bin/Debug/net6.0/UnitTest.dll --target "dotnet" --targetargs "test /path/to/test-project --no-build";
        #     reportgenerator -reports:'../coverage.cobertura.xml' -targetdir:'CoverageReports' -reporttypes:'Cobertura';
    artifacts:
        paths:
            - CoverageReports/Cobertura.xml

DockerBuild_Core:
    image: docker:latest
    services:
        - docker:dind
    tags:
        - DevOps
    stage: DockerBuild
    script: 
        - sh dockerbuild.sh "${CORE_AWS_ECR_REPOSITORY_URL}" "develop" "${AWS_DEFAULT_REGION}" "DockerfileCore"
    dependencies:
        - Build
        - UnitTest
    when: manual

DockerBuild_Auth:
    image: docker:latest
    services:
        - docker:dind
    tags:
        - DevOps
    stage: DockerBuild
    script: 
        - sh dockerbuild.sh "${AUTH_AWS_ECR_REPOSITORY_URL}" "develop" "${AWS_DEFAULT_REGION}" "DockerfileAuth"
    dependencies:
        - Build
        - UnitTest
    when: manual

SonarScanner:
    stage: SonarScanner
    image: mcr.microsoft.com/dotnet/sdk:6.0
    variables:
        SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
        GIT_DEPTH: "0"
    cache:
        key: "${CI_JOB_NAME}"
        paths:
        - .sonar/cache
    tags:
        - DevOps
    script: 
        - "apt-get update"
        - "apt-get install --yes openjdk-11-jre"
        - "dotnet tool install --global dotnet-sonarscanner"
        - "export PATH=\"$PATH:$HOME/.dotnet/tools\""
        - "dotnet sonarscanner begin 
            /k:\"dev1417_neoris_backend_AYUG5UunpBPtNSjZ3ZSP\" 
            /d:sonar.login=\"$SONAR_TOKEN\" 
            /d:\"sonar.host.url=$SONAR_HOST_URL\" "
        - "dotnet build"
        - "dotnet sonarscanner end /d:sonar.login=\"$SONAR_TOKEN\""
    dependencies:
        - Build
        - UnitTest
    allow_failure: true

# Sonar_Quality_Gate:
#     stage: SonarQualityGate
#     image:
#         name: amazon/aws-cli
#         entrypoint: [""] 
#     tags:
#         - Runner-Gitlab
#     script:
#         - echo 'sonar get quality'
#         - source SonarQuality.sh
#     only:
#         - master


Deploy_Container_Core:
    image:
        name: amazon/aws-cli
        entrypoint: [""] 
    tags:
        - DevOps
    stage: Deploy
    script: 
        - sh ecs_deploy.sh "develop" "${ECS_CORE_SERVICE}" "${ECS_CLUSTER}" "${AWS_DEFAULT_REGION}"
    dependencies:
        - DockerBuild_Core
    when: manual

Deploy_Container_Auth:
    image:
        name: amazon/aws-cli
        entrypoint: [""] 
    tags:
        - DevOps
    stage: Deploy
    script: 
        - sh ecs_deploy.sh "develop" "${ECS_AUTH_SERVICE}" "${ECS_CLUSTER}" "${AWS_DEFAULT_REGION}"
    dependencies:
        - DockerBuild_Auth
    when: manual